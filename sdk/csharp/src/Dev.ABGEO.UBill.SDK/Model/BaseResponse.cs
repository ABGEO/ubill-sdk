// <auto-generated>
/*
 * UBill API
 *
 * UBill API - provides programmatic access to our resources. You will be able to integrate our service into your system and communicate with clients easily.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: info@ubill.ge
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Dev.ABGEO.UBill.SDK.Client;

namespace Dev.ABGEO.UBill.SDK.Model
{
    /// <summary>
    /// BaseResponse
    /// </summary>
    public partial class BaseResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseResponse" /> class.
        /// </summary>
        /// <param name="statusID">Response status code</param>
        /// <param name="message">Human-readable response message</param>
        [JsonConstructor]
        public BaseResponse(long statusID, Option<string?> message = default)
        {
            StatusID = statusID;
            MessageOption = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Response status code
        /// </summary>
        /// <value>Response status code</value>
        /* <example>0</example> */
        [JsonPropertyName("statusID")]
        public long StatusID { get; set; }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Human-readable response message
        /// </summary>
        /// <value>Human-readable response message</value>
        /* <example>Success</example> */
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BaseResponse {\n");
            sb.Append("  StatusID: ").Append(StatusID).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BaseResponse" />
    /// </summary>
    public class BaseResponseJsonConverter : JsonConverter<BaseResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="BaseResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BaseResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> statusID = default;
            Option<string?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "statusID":
                            statusID = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!statusID.IsSet)
                throw new ArgumentException("Property is required for class BaseResponse.", nameof(statusID));

            if (statusID.IsSet && statusID.Value == null)
                throw new ArgumentNullException(nameof(statusID), "Property is not nullable for class BaseResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class BaseResponse.");

            return new BaseResponse(statusID.Value!.Value!, message);
        }

        /// <summary>
        /// Serializes a <see cref="BaseResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="baseResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BaseResponse baseResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, baseResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BaseResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="baseResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BaseResponse baseResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (baseResponse.MessageOption.IsSet && baseResponse.Message == null)
                throw new ArgumentNullException(nameof(baseResponse.Message), "Property is required for class BaseResponse.");

            writer.WriteNumber("statusID", baseResponse.StatusID);

            if (baseResponse.MessageOption.IsSet)
                writer.WriteString("message", baseResponse.Message);
        }
    }
}
