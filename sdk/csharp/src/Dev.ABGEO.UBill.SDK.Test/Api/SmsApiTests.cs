/*
 * UBill API
 *
 * UBill API - provides programmatic access to our resources. You will be able to integrate our service into your system and communicate with clients easily.
 *
 * The version of the OpenAPI document: 2.1.7
 * Contact: info@ubill.ge
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Dev.ABGEO.UBill.SDK.Api;
using Dev.ABGEO.UBill.SDK.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Dev.ABGEO.UBill.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing SmsApi
    /// </summary>
    public sealed class SmsApiTests : ApiTestsBase
    {
        private readonly ISmsApi _instance;

        public SmsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<ISmsApi>();
        }

        /// <summary>
        /// Test GetBalance
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBalanceAsyncTest()
        {
            Client.Option<Object?> body = default!;
            var response = await _instance.GetBalanceAsync(body);
            var model = response.Ok();
            Assert.IsType<SMSBalanceResponse>(model);
        }

        /// <summary>
        /// Test GetBrandNames
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBrandNamesAsyncTest()
        {
            Client.Option<Object?> body = default!;
            var response = await _instance.GetBrandNamesAsync(body);
            var model = response.Ok();
            Assert.IsType<BrandNamesResponse>(model);
        }

        /// <summary>
        /// Test GetDeliveryReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDeliveryReportAsyncTest()
        {
            long smsID = default!;
            Client.Option<Object?> body = default!;
            var response = await _instance.GetDeliveryReportAsync(smsID, body);
            var model = response.Ok();
            Assert.IsType<DeliveryReportResponse>(model);
        }

        /// <summary>
        /// Test SendSMS
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendSMSAsyncTest()
        {
            Client.Option<SMSPayload> sMSPayload = default!;
            var response = await _instance.SendSMSAsync(sMSPayload);
            var model = response.Ok();
            Assert.IsType<SendSMSResponse>(model);
        }
    }
}
